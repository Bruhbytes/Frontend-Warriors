{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useFetch = url => {\n  _s();\n  const [Products, setProducts] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(res => {\n        if (!res.ok) {\n          // error coming back from server\n          throw Error('could not fetch the data for that resource');\n        }\n        return res.json();\n      }).then(Products => {\n        setIsPending(false);\n        setProducts(Products);\n        setError(null);\n      }).catch(err => {\n        if (err.name === 'AbortError') {\n          console.log('fetch aborted');\n        } else {\n          // auto catches network / connection error\n          setIsPending(false);\n          setError(err.message);\n        }\n      });\n    }, 1000);\n\n    // abort the fetch\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    Products,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"iBEZjvS8LZvupzLMdWPH4MqNX3I=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","Products","setProducts","isPending","setIsPending","error","setError","abortCont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort"],"sources":["D:/js react/my-app/src/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useFetch = (url) => {\r\n  const [Products , setProducts] = useState(null);\r\n  const [isPending, setIsPending] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const abortCont = new AbortController();\r\n\r\n    setTimeout(() => {\r\n      fetch(url, { signal: abortCont.signal })\r\n      .then(res => {\r\n        if (!res.ok) { // error coming back from server\r\n          throw Error('could not fetch the data for that resource');\r\n        } \r\n        return res.json();\r\n      })\r\n      .then(Products=> {\r\n        setIsPending(false);\r\n        setProducts(Products);\r\n        setError(null);\r\n      })\r\n      .catch(err => {\r\n        if (err.name === 'AbortError') {\r\n          console.log('fetch aborted')\r\n        } else {\r\n          // auto catches network / connection error\r\n          setIsPending(false);\r\n          setError(err.message);\r\n        }\r\n      })\r\n    }, 1000);\r\n\r\n    // abort the fetch\r\n    return () => abortCont.abort();\r\n  }, [url])\r\n\r\n  return { Products, isPending, error };\r\n}\r\n \r\nexport default useFetch;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAA;EACxB,MAAM,CAACC,QAAQ,EAAGC,WAAW,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC/C,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,IAAIC,eAAe,EAAE;IAEvCC,UAAU,CAAC,MAAM;MACfC,KAAK,CAACV,GAAG,EAAE;QAAEW,MAAM,EAAEJ,SAAS,CAACI;MAAO,CAAC,CAAC,CACvCC,IAAI,CAACC,GAAG,IAAI;QACX,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;UAAE;UACb,MAAMC,KAAK,CAAC,4CAA4C,CAAC;QAC3D;QACA,OAAOF,GAAG,CAACG,IAAI,EAAE;MACnB,CAAC,CAAC,CACDJ,IAAI,CAACX,QAAQ,IAAG;QACfG,YAAY,CAAC,KAAK,CAAC;QACnBF,WAAW,CAACD,QAAQ,CAAC;QACrBK,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,CACDW,KAAK,CAACC,GAAG,IAAI;QACZ,IAAIA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAE;UAC7BC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;QAC9B,CAAC,MAAM;UACL;UACAjB,YAAY,CAAC,KAAK,CAAC;UACnBE,QAAQ,CAACY,GAAG,CAACI,OAAO,CAAC;QACvB;MACF,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAMf,SAAS,CAACgB,KAAK,EAAE;EAChC,CAAC,EAAE,CAACvB,GAAG,CAAC,CAAC;EAET,OAAO;IAAEC,QAAQ;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACvC,CAAC;AAAA,GArCKN,QAAQ;AAuCd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}